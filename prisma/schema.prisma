// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}


model Profile {
  id String @id @default(uuid())
  userId String @unique
  name String
  imageUrl String @db.Text
  email String @db.Text


  servers Server[]
  members Member[]

  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


}


model Server {
  id String @id  @default(uuid())
  name String
  imageUrl String @db.Text
  inviteCode String @unique

  profileId String
  members Member[]
  channels Channel[]
  
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([profileId])
}



enum MemberRole {
  ADMIN
  MODERATOR
  GUEST

}


model Member {
  id String @id @default(uuid())
  role MemberRole @default(GUEST)
  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  serverId String
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)
  messages Message[]

  conversationsInitiated Conversations[] @relation("MemberOne")
  conversationsReceived Conversations[] @relation("MemberTwo")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])

  directMessages DirectMessage[]
}


enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}


model Channel {
  id String @id @default(uuid())
  name String
  type ChannelType @default(TEXT)


  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  serverId String
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)
  messages Message[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([serverId])
  @@index([profileId])
}


model Message {
  id String @id @default(uuid())
  content String @db.Text
  filreUrl String? @db.Text
  memberId String
  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
  channelId String
  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  
  @@index([channelId])
  @@index([memberId])



}



model Conversations {
  id String @id @default(uuid())

  memberOneId String
  memberTwoId String
  memberOne Member @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)
  memberTwo Member @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)




  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([memberOneId])
  @@index([memberTwoId])

  @@unique([memberOneId, memberTwoId])


  

  DirectMessage DirectMessage[]
}

model DirectMessage {
  id String @id @default(uuid())
  content String @db.Text
  memberId String
  fileUrl String? @db.Text
  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
  deleted Boolean @default(false)


  conversationId String
  conversation Conversations @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([memberId])

  @@index([conversationId])
}


